        
      Техническое задание
      Реализовать конвертер ресурсов на C# с помощью методологии Test-Driven Development
      
      Конвертер представляет собой преобразователь ресурсов, который берет ресурсы из зоны
      погрузки (справа) и через несколько секунд преобразовывает его в ресурсы другого типа
      (слева).
      
      Конвертер работает автоматически. Когда заканчивается цикл переработки ресурсов, то
      конвертер берет следующую партию и начинает цикл по новой, пока можно брать ресурсы
      из зоны загрузки или пока есть место для ресурсов выгрузки.
      
      Также конвертер можно выключать. Если конвертер во время работы был выключен, то он
      возвращает обратно ресурсы в зону загрузки. Если в это время были добавлены еще
      ресурсы, то при переполнении возвращаемые ресурсы «сгорают».
      
      Если в конвертер попытаться положить больше ресурсов в инпут зону, чем свободных
      мест, то конвертер может выдать сдачу, сколько ресурсов не влезло
      
      Характеристики конвертера:
      Зона погрузки: вместимость бревен
      Зона выгрузки: вместимость досок
      Кол-во ресурсов, которое берется с зоны погрузки
      Кол-во ресурсов, которое поставляется в зону выгрузки
      Время преобразования ресурсов
      Состояние: вкл/выкл
      
      Критерии оценки:
      Соблюдение парадигмы OОП, Object-Oriented Design
      Покрытие Edge-Cases
      Обработка исключений
      Отсутствие монобехов
      Использование Edit Mode сборки
      Читаемый код
      Модульность решения
      
      Использовать сторонние плагины и LINQ запрещается!
      
      Для реализации таймера в классе Converter делаете ручной метод Update(float deltaTime)
      и ручками тикаете!
       
       Допы:
       -конвертер запускается только тогда, когда
            1.в зоне погрузки находится количество ресурсов, достаточное для загрузки в конвейер 
                (то есть если вместимомть 5, а на входе 2 - конвертер не работает)
            2. на зона выгрузки не полная
            
            
       Фидбэк:
       1. Класс Storage выделяет слишком памяти, можно было обойтись int count
       2. С IResource, PlankStub, Factory — лишнее
       3. Метод Update у конвертера не проверяет, что в зоне погрузки есть ресурсы, которые можно загрузить в работу
       4. Есть сложные тесты типа Update_InterruptingCycleWithLoadingNewResources_ShouldBurnGrabbedResource, 
       в которых нет //Arrange, //Act, //Assert, из-за этого сложнее понять, что именно тестируем
       5. Нейминг тестов можно сделать компактнее, разбив классы тестов на регионы или partial классы

       